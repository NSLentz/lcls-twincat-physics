<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_CalcFocalLengthSingleLens_Test" Id="{84e8e88f-6983-4e91-9ebc-dec0075a6cd5}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_CalcFocalLengthSingleLens_Test EXTENDS TcUnit.FB_TestSuite
VAR
    nTestID : INT;
    fbCalcFocalLengthSingleLens : FB_CalcFocalLengthSingleLens;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
nTestID := 0;

TestInvalidDeltaExpectError0FocalLength(
    fDelta := 0
);

TestInvalidRadiusExpectError0FocalLength(
    fRadius := 0.0
);

TestInvalidRadiusExpectError0FocalLength(
    fRadius := -20.0
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 1.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fDelta := 0.005621922785393444,
    fRadius := 0.0001,
    fExpected := 0.008893754309452119
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 2.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fDelta := 0.005621922785393444,
    fRadius := 0.0051,
    fExpected := 0.45358146978205804
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 3.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fDelta := 1.7147402940032417e-06,
    fRadius := 0.0001,
    fExpected := 29.15893454819898
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 4.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fDelta := 1.7147402940032417e-06,
    fRadius := 0.0051,
    fExpected := 1487.105661958148
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 5.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fDelta := 4.316182378185529e-07,
    fRadius := 0.0001,
    fExpected := 115.84311231310711
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 6.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fDelta := 4.316182378185529e-07,
    fRadius := 0.0051,
    fExpected := 5907.998727968463
);
]]></ST>
    </Implementation>
    <Method Name="TestInvalidDeltaExpectError0FocalLength" Id="{423e18c6-5a97-4b67-a6d2-19839e16e0dc}">
      <Declaration><![CDATA[
METHOD TestInvalidDeltaExpectError0FocalLength
VAR_INPUT
    fDelta : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST(CONCAT('TestInvalidDeltaExpectError0FocalLength ID: ',
    INT_TO_STRING(nTestID))
);

fbCalcFocalLengthSingleLens(
    fDelta := fDelta,
    fRadius := 0.005,
    fFocalLength =>,
    bError =>,
    sErrorMsg =>
);

AssertTrue(
    Condition := fbCalcFocalLengthSingleLens.bError,
    Message := 'Expected bError bit to be true but it was false.'
);

AssertTrue(
    Condition := fbCalcFocalLengthSingleLens.sErrorMsg <> '',
    Message := 'Expected sErrorMsg to not be empty.'
);

AssertEquals_LREAL(
    Expected := 0,
    Actual := fbCalcFocalLengthSingleLens.fFocalLength,
    Delta := 0,
    Message := 'Calculated focal length should be 0 when an error is detected.'
);

TEST_FINISHED();

nTestID := nTestID + 1;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestInvalidRadiusExpectError0FocalLength" Id="{b85fb0eb-eb67-4008-bf6e-a27e16601c45}">
      <Declaration><![CDATA[
METHOD TestInvalidRadiusExpectError0FocalLength
VAR_INPUT
    fRadius : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST(CONCAT('TestInvalidRadiusExpectError0FocalLength ID: ',
    INT_TO_STRING(nTestID))
);

fbCalcFocalLengthSingleLens(
    fDelta := 0.0004,
    fRadius := fRadius,
    fFocalLength =>,
    bError =>,
    sErrorMsg =>
);

AssertTrue(
    Condition := fbCalcFocalLengthSingleLens.bError,
    Message := 'Expected bError bit to be true but it was false.'
);

AssertTrue(
    Condition := fbCalcFocalLengthSingleLens.sErrorMsg <> '',
    Message := 'Expected sErrorMsg to not be empty.'
);

AssertEquals_LREAL(
    Expected := 0,
    Actual := fbCalcFocalLengthSingleLens.fFocalLength,
    Delta := 0,
    Message := 'Calculated focal length should be 0 when an error is detected.'
);

TEST_FINISHED();

nTestID := nTestID + 1;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValidInputsExpectNoErrorAccurateFocalLength" Id="{9e7e0620-b4ab-4e63-adf5-977fffee39e5}">
      <Declaration><![CDATA[
METHOD TestValidInputsExpectNoErrorAccurateFocalLength
VAR_INPUT
    fDelta : LREAL;
    fRadius : LREAL;

    fExpected : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST(CONCAT('TestValidInputsExpectNoErrorAccurateFocalLength ID: ',
    INT_TO_STRING(nTestID))
);

fbCalcFocalLengthSingleLens(
    fDelta := fDelta,
    fRadius := fRadius,
    fFocalLength =>,
    bError =>,
    sErrorMsg =>
);

AssertFalse(
    Condition := fbCalcFocalLengthSingleLens.bError,
    Message := 'Expected bError bit to be false but it was true.'
);

AssertFalse(
    Condition := fbCalcFocalLengthSingleLens.sErrorMsg <> '',
    Message := 'Expected sErrorMsg to be empty.'
);

AssertEquals_LREAL(
    Expected := fExpected,
    Actual := fbCalcFocalLengthSingleLens.fFocalLength,
    Delta := 0.001 * fExpected,
    Message := 'Calculated focal length did not calculate close enough to the expected value.'
);

TEST_FINISHED();

nTestID := nTestID + 1;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>