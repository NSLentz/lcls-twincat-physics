<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_CalcImageDistance" Id="{81fe0328-7a74-4932-bc70-1630590071fc}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_CalcImageDistance
VAR_INPUT
    fFocalLength : LREAL; // The focal length, in meters.
    fSourceDistance : LREAL; // The distance, in meters, from the source to the lens.
END_VAR
VAR_OUTPUT
    fImageDistance : LREAL; // The distance, in meters, to the image of the source created by the lens.
    bError : BOOL; // TRUE if function block reports an error.
    sErrorMsg : T_MaxString; // Provides debugging help for errors.
END_VAR
VAR
    fFocalLengthInverse : LREAL;
    fSourceDistanceInverse : LREAL;
    fImageDistanceInverse : LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Initialize image distance and error values.
fImageDistance := 0.0;
bError := FALSE;
sErrorMsg := '';

// Check for an invalid focal length input.
IF fFocalLength = 0.0 THEN
    bError := TRUE;
    sErrorMsg := CONCAT('The focal length specified: [',
        CONCAT(LREAL_TO_STRING(fFocalLength),
        '] must not be 0.'));
    RETURN;
END_IF

fFocalLengthInverse := 1.0 / fFocalLength;

// Check for an invalid source distance input.
IF fSourceDistance = 0.0 THEN
    bError := TRUE;
    sErrorMsg := CONCAT('The source distance specified: [',
        CONCAT(LREAL_TO_STRING(fSourceDistance),
        '] must not be 0.'));
    RETURN;
END_IF

fSourceDistanceInverse := 1.0 / fSourceDistance;

fImageDistanceInverse := fFocalLengthInverse - fSourceDistanceInverse;

// Check for an invalid inverted image distance.
IF fImageDistanceInverse = 0.0 THEN
    bError := TRUE;
    sErrorMsg := CONCAT('The calculated inverse image distance: [',
        CONCAT(LREAL_TO_STRING(fImageDistanceInverse),
        '] must not be 0.'));
    RETURN;
END_IF

fImageDistance := 1.0 / fImageDistanceInverse;
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>